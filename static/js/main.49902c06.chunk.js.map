{"version":3,"sources":["logo.svg","Components/Pagination/pagination.js","Components/Custom-Card/index.js","Components/Search-Bar/SearchContent.js","Components/Select-Country/selectCountry.js","Components/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pagination","countryPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","className","map","number","key","onClick","CustomCard","country","loading","mode","Card","Meta","style","padding","hoverable","width","backgroundColor","cover","alt","src","flag","height","color","name","display","justifyContent","alignItems","capital","population","Search","props","useState","setName","options","setOptions","onSearch","val","filtered","filter","toString","toLowerCase","includes","setSearchCountry","console","log","onSelect","option","value","placeholder","enterButton","size","Region","Option","Select","id","defaultValue","onChange","countryOne","region","App","setLoading","setCountry","currentPage","setCurrentPage","searchCountry","setMode","useEffect","a","axios","get","res","data","fetchData","indexOfLastPost","indexOfFirstPost","currentPosts","slice","float","marginTop","paddingTop","marginLeft","flexWrap","length","pageNumber","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49902c06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nimport React from 'react';\r\n\r\n\r\nconst Pagination = ({ countryPerPage, totalPosts, paginate }) => {\r\n    const pageNumbers = [];\r\n\r\n    for (let i = 1; i <= Math.ceil(totalPosts / countryPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n       <nav>\r\n           <ul className=\"pagination\">\r\n               {pageNumbers.map(number=> (\r\n                   <li key={number} className = \"page-item\">\r\n                       <a onClick={() => paginate(number)} className=\"page-link\">\r\n                           {number}\r\n                       </a>\r\n                   </li>\r\n               ))}\r\n           </ul>\r\n       </nav>\r\n    )\r\n}\r\n\r\n\r\nexport default Pagination\r\n\r\n","import 'antd/dist/antd.css';\r\nimport { Card } from 'antd';\r\nimport React from 'react';\r\n\r\n\r\n\r\nconst CustomCard = ({country, loading, mode})=> {\r\n    if (loading) {\r\n        return <h2>Loading...</h2>\r\n    }\r\n    const { Meta } = Card;\r\n    return (  country.map( country => (\r\n            <div style={{padding: \"10px\" }} >\r\n            <Card \r\n                hoverable\r\n                style={{ width: 240, backgroundColor: mode?\"white\" : \"#121212\"}}\r\n                cover={<img alt=\"example\" src= {country.flag} height= \"150\" />}\r\n            >\r\n                <div style={{ color: mode?\"#121212\" :\"white\"}}>\r\n                {country.name} \r\n                </div>\r\n                <div style= {{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", backgroundColor: mode?\"white\" : \"#121212\",  color: mode?\"#333333\" :\"white\"}}>\r\n                    <div >\r\n                        <img src =\"logo here\"/> {country.capital}\r\n                    </div>\r\n                    <div>\r\n                        <img src =\"logo here\"/>{country.population}\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    )\r\n\r\n        )\r\n        \r\n    );\r\n}\r\n\r\nexport default CustomCard;\r\n","import React, {  useState } from \"react\";\r\nimport { AutoComplete, Input } from \"antd\";\r\n\r\nfunction Search(props) {\r\n    const { country } = props;\r\n  const [name, setName] = useState(\"\");\r\n  const [options, setOptions] = useState([]);\r\n\r\n  const onSearch = val => {\r\n    let filtered = country.filter(\r\n      country =>\r\n        country.name\r\n          .toString()\r\n          .toLowerCase()\r\n          .includes(val)\r\n    );\r\n    setOptions(filtered);\r\n    props.setSearchCountry(filtered);\r\n  };\r\n  const onSelect = (val, option) => {\r\n    setName(option.value);\r\n  };\r\nconsole.log(options)\r\nreturn (\r\n    <div>\r\n        \r\n    <AutoComplete\r\n        options={options}\r\n        onSelect={(val, option) => onSelect(val, option)}\r\n        onSearch={onSearch}\r\n      ><Input.Search\r\n      placeholder=\"Search Country\"\r\n      enterButton=\"Search\"\r\n      size=\"large\"\r\n      onSearch={onSearch}\r\n    />\r\n    </AutoComplete>\r\n    </div>\r\n)\r\n}\r\nexport default Search","import React from 'react';\r\nimport { Select } from 'antd';\r\n\r\nfunction Region(props){\r\n    const {country} = props;\r\nconst { Option } = Select;\r\n\r\n\r\nfunction handleChange(value) {\r\n    console.log(country);\r\n    let filtered = country.filter(\r\n        countryOne => {\r\n            return (\r\n          countryOne.region == value\r\n        )\r\n        }\r\n      );\r\n      //console.log(filtered, \"hello\");\r\n      props.setSearchCountry(filtered);\r\n    };\r\n \r\n\r\n\r\n  return(\r\n    <Select id=\"region\" placeholder=\"Countries by region\" defaultValue=\"ALL\" style={{ width: 120 }} onChange={handleChange}>\r\n    <Option value=\"Americas\">Americas</Option>\r\n    <Option value=\"Africa\">Africa</Option>\r\n    <Option value=\"Asia\">Asia</Option>\r\n    <Option value=\"Europe\">Europe</Option>\r\n    <Option value=\"Oceania\">Oceania</Option>\r\n  </Select>\r\n  )\r\n}\r\n\r\nexport default Region\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Pagination from '../Pagination/pagination.js';\r\nimport CustomCard from '../Custom-Card'; \r\nimport Search from '../Search-Bar/SearchContent.js';\r\nimport Region from '../Select-Country/selectCountry.js';\r\n\r\n\r\nconst App = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [country, setCountry] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [countryPerPage] = useState(15);\r\n    const [searchCountry, setSearchCountry] = useState([]);\r\n    const [mode, setMode] = useState(false);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        setLoading(true);\r\n        const res = await axios.get(\"https://restcountries.eu/rest/v2/all\");\r\n        setCountry(res.data);\r\n        setLoading(false);\r\n      }\r\n\r\n      fetchData();\r\n    }, []);\r\n\r\n  const indexOfLastPost = currentPage*countryPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - countryPerPage;\r\n  const currentPosts = country.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  const paginate = pageNumber => setCurrentPage(pageNumber)\r\n\r\n  return (\r\n    <div style={{ backgroundColor: mode?\"white\" : \"#121212\"}}>\r\n      <div className=\"navbar navbar-expand-sm bg-primary navbar-dark\">\r\n        <h1>Countries</h1>\r\n        \r\n      </div>\r\n      <button style={{ float: \"right\", marginTop: \"10px\" }} onClick= {()=>setMode(!mode)}>Change Mode</button>\r\n  \r\n    <div style={{  display: \"flex\", justifyContent: \"center\", paddingTop: \"10px\"}}>\r\n      <Search country = {country} setSearchCountry = {setSearchCountry}/>\r\n      <div style={{ display: \"flex\", marginLeft: \"100px\"}}>\r\n      <Region country = {country} setSearchCountry={setSearchCountry} />\r\n      </div>\r\n    </div>\r\n    \r\n      \r\n    \r\n    <div style={{  display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\"}}>\r\n     <CustomCard country ={searchCountry.length>0 ?searchCountry : currentPosts} loading={loading} mode={mode}   />\r\n     \r\n    </div>\r\n    <div style={{ display:\"flex\", justifyContent: \"center\" }}>\r\n      <Pagination countryPerPage = {countryPerPage} totalPosts={country.length} paginate = {paginate}/>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Components/Home';\n\nfunction App() {\n  return (\n    <div >\n     <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}